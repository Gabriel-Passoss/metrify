// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  document  String   @unique
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites Invite[]
  members Member[]
  stores  Store[]

  @@map("organizations")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(SELLER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]

  @@map("users")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("tokens")
}

model Store {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  logoUrl     String?  @map("logo_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  products Product[]

  @@map("stores")
}

model Product {
  id           String  @id @default(uuid())
  name         String
  platform     String
  description  String?
  imageUrl     String? @map("image_url")
  price        Int
  quantity     Int
  costPerUnit  Int?    @map("cost_per_unit")
  shippingCost Int?    @map("shipping_cost")
  taxCost      Int?    @map("tax_cost")
  pixTax       Int?    @map("pix_tax")
  bankSlipTax  Int?    @map("bank_slip_tax")

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String @map("store_id")

  installmentPrice CreditCardInstallmentPrice[]
  installmentTax   CreditCardTax[]
  extraTaxes       ExtraTax[]

  @@map("products")
}

model CreditCardInstallmentPrice {
  id                String @id @default(uuid())
  installmentNumber Int    @map("installment_number")
  price             Int

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("credit_card_installment_prices")
}

model CreditCardTax {
  id                String @id @default(uuid())
  installmentNumber Int    @map("installment_number")
  tax               Int

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("credit_card_taxes")
}

model ExtraTax {
  id   String @id @default(uuid())
  name String
  tax  Int

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("extra_taxes")
}

enum AccountProvider {
  GOOGLE
}

enum TokenType {
  PASSWORD_RECOVERY
}

enum Role {
  ADMIN
  MANAGER
  SELLER
}
